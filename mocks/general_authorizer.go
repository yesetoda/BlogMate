// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt"
	mock "github.com/stretchr/testify/mock"
)

// GeneralAuthorizer is an autogenerated mock type for the GeneralAuthorizer type
type GeneralAuthorizer struct {
	mock.Mock
}

// AUTH provides a mock function with given fields: tokenString, secretKey
func (_m *GeneralAuthorizer) AUTH(tokenString string, secretKey string) jwt.Claims {
	ret := _m.Called(tokenString, secretKey)

	if len(ret) == 0 {
		panic("no return value specified for AUTH")
	}

	var r0 jwt.Claims
	if rf, ok := ret.Get(0).(func(string, string) jwt.Claims); ok {
		r0 = rf(tokenString, secretKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Claims)
		}
	}

	return r0
}

// AdminAuth provides a mock function with given fields: anyClaim
func (_m *GeneralAuthorizer) AdminAuth(anyClaim interface{}) bool {
	ret := _m.Called(anyClaim)

	if len(ret) == 0 {
		panic("no return value specified for AdminAuth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(anyClaim)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OwnerAuth provides a mock function with given fields: anyClaim, author_id
func (_m *GeneralAuthorizer) OwnerAuth(anyClaim interface{}, author_id string) bool {
	ret := _m.Called(anyClaim, author_id)

	if len(ret) == 0 {
		panic("no return value specified for OwnerAuth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, string) bool); ok {
		r0 = rf(anyClaim, author_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserAuth provides a mock function with given fields: anyClaim
func (_m *GeneralAuthorizer) UserAuth(anyClaim interface{}) bool {
	ret := _m.Called(anyClaim)

	if len(ret) == 0 {
		panic("no return value specified for UserAuth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(anyClaim)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewGeneralAuthorizer creates a new instance of GeneralAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneralAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneralAuthorizer {
	mock := &GeneralAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
