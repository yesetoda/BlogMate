// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/yesetoda/BlogMate/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: u
func (_m *UserRepository) Create(u *domain.User) (domain.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (domain.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) domain.User); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId
func (_m *UserRepository) Delete(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: opts
func (_m *UserRepository) Get(opts domain.UserFilterOption) ([]domain.User, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserFilterOption) ([]domain.User, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(domain.UserFilterOption) []domain.User); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserFilterOption) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, updateData
func (_m *UserRepository) Update(userId string, updateData domain.User) (domain.User, error) {
	ret := _m.Called(userId, updateData)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.User) (domain.User, error)); ok {
		return rf(userId, updateData)
	}
	if rf, ok := ret.Get(0).(func(string, domain.User) domain.User); ok {
		r0 = rf(userId, updateData)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, domain.User) error); ok {
		r1 = rf(userId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
