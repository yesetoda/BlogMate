// // Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

// import (
// 	infrastructure "github.com/yesetoda/BlogMate/infrastructure"

// 	mock "github.com/stretchr/testify/mock"
// )

// // AIModel is an autogenerated mock type for the AIModel type
// type AIModel struct {
// 	mock.Mock
// }

// // Chat provides a mock function with given fields: prompt
// func (_m *AIModel) Chat(prompt string) (string, error) {
// 	ret := _m.Called(prompt)

// 	if len(ret) == 0 {
// 		panic("no return value specified for Chat")
// 	}

// 	var r0 string
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
// 		return rf(prompt)
// 	}
// 	if rf, ok := ret.Get(0).(func(string) string); ok {
// 		r0 = rf(prompt)
// 	} else {
// 		r0 = ret.Get(0).(string)
// 	}

// 	if rf, ok := ret.Get(1).(func(string) error); ok {
// 		r1 = rf(prompt)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // Recommend provides a mock function with given fields: Data, opt
// func (_m *AIModel) Recommend(Data string, opt string) (infrastructure.RecommendationResponse, error) {
// 	ret := _m.Called(Data, opt)

// 	if len(ret) == 0 {
// 		panic("no return value specified for Recommend")
// 	}

// 	var r0 infrastructure.RecommendationResponse
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(string, string) (infrastructure.RecommendationResponse, error)); ok {
// 		return rf(Data, opt)
// 	}
// 	if rf, ok := ret.Get(0).(func(string, string) infrastructure.RecommendationResponse); ok {
// 		r0 = rf(Data, opt)
// 	} else {
// 		r0 = ret.Get(0).(infrastructure.RecommendationResponse)
// 	}

// 	if rf, ok := ret.Get(1).(func(string, string) error); ok {
// 		r1 = rf(Data, opt)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // Summarize provides a mock function with given fields: _a0
// func (_m *AIModel) Summarize(_a0 infrastructure.Data) (string, error) {
// 	ret := _m.Called(_a0)

// 	if len(ret) == 0 {
// 		panic("no return value specified for Summarize")
// 	}

// 	var r0 string
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(infrastructure.Data) (string, error)); ok {
// 		return rf(_a0)
// 	}
// 	if rf, ok := ret.Get(0).(func(infrastructure.Data) string); ok {
// 		r0 = rf(_a0)
// 	} else {
// 		r0 = ret.Get(0).(string)
// 	}

// 	if rf, ok := ret.Get(1).(func(infrastructure.Data) error); ok {
// 		r1 = rf(_a0)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // Validate provides a mock function with given fields: _a0
// func (_m *AIModel) Validate(_a0 infrastructure.Data) error {
// 	ret := _m.Called(_a0)

// 	if len(ret) == 0 {
// 		panic("no return value specified for Validate")
// 	}

// 	var r0 error
// 	if rf, ok := ret.Get(0).(func(infrastructure.Data) error); ok {
// 		r0 = rf(_a0)
// 	} else {
// 		r0 = ret.Error(0)
// 	}

// 	return r0
// }

// // NewAIModel creates a new instance of AIModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// // The first argument is typically a *testing.T value.
// func NewAIModel(t interface {
// 	mock.TestingT
// 	Cleanup(func())
// }) *AIModel {
// 	mock := &AIModel{}
// 	mock.Mock.Test(t)

// 	t.Cleanup(func() { mock.AssertExpectations(t) })

// 	return mock
// }
